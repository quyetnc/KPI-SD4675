// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace RoyalDragon.Model.Models.Entities
{
    public partial class BlockChainDbContext : DbContext
    {
        public BlockChainDbContext()
        {
        }

        public BlockChainDbContext(DbContextOptions<BlockChainDbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<BeforeTransaction> BeforeTransaction { get; set; }
        public virtual DbSet<Box> Box { get; set; }
        public virtual DbSet<ClaimedInDay> ClaimedInDay { get; set; }
        public virtual DbSet<Faq> Faq { get; set; }
        public virtual DbSet<LogBonusUsers> LogBonusUsers { get; set; }
        public virtual DbSet<LogError> LogError { get; set; }
        public virtual DbSet<LogTransaction> LogTransaction { get; set; }
        public virtual DbSet<Menu> Menu { get; set; }
        public virtual DbSet<Mp3> Mp3 { get; set; }
        public virtual DbSet<Nft> Nft { get; set; }
        public virtual DbSet<NftUsers> NftUsers { get; set; }
        public virtual DbSet<ReceiveTransaction> ReceiveTransaction { get; set; }
        public virtual DbSet<Role> Role { get; set; }
        public virtual DbSet<Settings> Settings { get; set; }
        public virtual DbSet<Users> Users { get; set; }
        public virtual DbSet<UsersRole> UsersRole { get; set; }
        public virtual DbSet<VListNft> VListNft { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<BeforeTransaction>(entity =>
            {
                entity.Property(e => e.AddressBuy).HasMaxLength(200);

                entity.Property(e => e.AddressRef).HasMaxLength(200);

                entity.Property(e => e.Block).HasMaxLength(200);

                entity.Property(e => e.Blocknumber).HasMaxLength(200);

                entity.Property(e => e.Gas).HasMaxLength(200);

                entity.Property(e => e.Gasprice).HasMaxLength(200);

                entity.Property(e => e.InputBnb).HasColumnName("InputBNB");

                entity.Property(e => e.Nonce).HasMaxLength(200);

                entity.Property(e => e.PersonalSign).HasMaxLength(200);
            });

            modelBuilder.Entity<Box>(entity =>
            {
                entity.Property(e => e.Image).HasMaxLength(500);

                entity.Property(e => e.Name)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.TypePrize).HasMaxLength(100);
            });

            modelBuilder.Entity<ClaimedInDay>(entity =>
            {
                entity.Property(e => e.CreateOn).HasColumnType("datetime");

                entity.HasOne(d => d.NftUsers)
                    .WithMany(p => p.ClaimedInDay)
                    .HasForeignKey(d => d.NftUsersId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ClaimedInDay_NftUsers");
            });

            modelBuilder.Entity<Faq>(entity =>
            {
                entity.ToTable("Faq", "Doc");

                entity.Property(e => e.Answer).IsRequired();

                entity.Property(e => e.CreateOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Question)
                    .IsRequired()
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<LogBonusUsers>(entity =>
            {
                entity.Property(e => e.CreateOn).HasColumnType("datetime");

                entity.Property(e => e.FromAddress).HasMaxLength(200);

                entity.Property(e => e.Ref)
                    .HasMaxLength(3)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<LogError>(entity =>
            {
                entity.Property(e => e.CreateOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<LogTransaction>(entity =>
            {
                entity.Property(e => e.AddressRef).HasMaxLength(100);

                entity.Property(e => e.CreateOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FromAddress)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Hash)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Sussess)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.ToAddress)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.TransactionHashReceiving)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.TransactionHashReferal).HasMaxLength(500);

                entity.Property(e => e.Type).HasMaxLength(50);

                entity.Property(e => e.Value).HasColumnType("decimal(18, 0)");
            });

            modelBuilder.Entity<Menu>(entity =>
            {
                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Name).HasMaxLength(200);
            });

            modelBuilder.Entity<Mp3>(entity =>
            {
                entity.Property(e => e.CreateOn).HasColumnType("datetime");

                entity.Property(e => e.FileName)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<Nft>(entity =>
            {
                entity.Property(e => e.Bonus).HasColumnType("decimal(18, 14)");

                entity.Property(e => e.CreateOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Image).HasMaxLength(500);

                entity.Property(e => e.Name).HasMaxLength(500);

                entity.Property(e => e.TypeNft)
                    .HasMaxLength(20)
                    .HasDefaultValueSql("('headphone')");
            });

            modelBuilder.Entity<NftUsers>(entity =>
            {
                entity.Property(e => e.CreateOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.HasOne(d => d.Nft)
                    .WithMany(p => p.NftUsers)
                    .HasForeignKey(d => d.NftId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NftUsers_Nft");

                entity.HasOne(d => d.Users)
                    .WithMany(p => p.NftUsers)
                    .HasForeignKey(d => d.UsersId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_NftUsers_Users");
            });

            modelBuilder.Entity<ReceiveTransaction>(entity =>
            {
                entity.Property(e => e.Action)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.CreateOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.FromCustomer)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ToOwner)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.TransactionHash)
                    .HasMaxLength(100)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<Role>(entity =>
            {
                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.RoleName)
                    .IsRequired()
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<Settings>(entity =>
            {
                entity.Property(e => e.AccountPrivateKey)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.AccountReceiveMoney)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.ApiKeyBscScan)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.ContractAddress)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.DefaultPanAbi).IsUnicode(false);

                entity.Property(e => e.PanAbiBnb).IsUnicode(false);

                entity.Property(e => e.Rate).HasDefaultValueSql("((50000))");
            });

            modelBuilder.Entity<Users>(entity =>
            {
                entity.Property(e => e.Address).HasMaxLength(300);

                entity.Property(e => e.Avatar).HasMaxLength(200);

                entity.Property(e => e.BlockChainAddress).HasMaxLength(200);

                entity.Property(e => e.CheckPolicy)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.ContractAddress).HasMaxLength(200);

                entity.Property(e => e.CreateOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.F1)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.F2)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.F3)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.F4)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.F5)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.F6)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Facebook).HasMaxLength(200);

                entity.Property(e => e.Fullname)
                    .IsRequired()
                    .HasMaxLength(100);

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Linkedin).HasMaxLength(200);

                entity.Property(e => e.Password).HasMaxLength(200);

                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Policy).HasMaxLength(500);

                entity.Property(e => e.PrivateKey).HasMaxLength(200);

                entity.Property(e => e.Refferal)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.RefferalId).HasMaxLength(200);

                entity.Property(e => e.Token).HasMaxLength(1000);

                entity.Property(e => e.Twitter).HasMaxLength(200);

                entity.Property(e => e.TwoFacode)
                    .HasMaxLength(500)
                    .HasColumnName("TwoFACode");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Youtube).HasMaxLength(200);
            });

            modelBuilder.Entity<UsersRole>(entity =>
            {
                entity.HasOne(d => d.Role)
                    .WithMany(p => p.UsersRole)
                    .HasForeignKey(d => d.RoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UsersRole_Role");

                entity.HasOne(d => d.Users)
                    .WithMany(p => p.UsersRole)
                    .HasForeignKey(d => d.UsersId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UsersRole_Users");
            });

            modelBuilder.Entity<VListNft>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vListNft");

                entity.Property(e => e.Bonus).HasColumnType("decimal(18, 14)");

                entity.Property(e => e.CreateOn).HasColumnType("datetime");

                entity.Property(e => e.Image).HasMaxLength(500);

                entity.Property(e => e.Name).HasMaxLength(500);
            });

            OnModelCreatingGeneratedProcedures(modelBuilder);
            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}