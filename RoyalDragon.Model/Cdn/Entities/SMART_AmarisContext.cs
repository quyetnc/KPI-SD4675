// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using System.Configuration;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace RoyalDragon.Model.Cdn.Entities
{
    public partial class SMART_AmarisContext : DbContext
    {
        public SMART_AmarisContext()
        {
        }

        public SMART_AmarisContext(DbContextOptions<SMART_AmarisContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Category> Category { get; set; }
        public virtual DbSet<CmdbParentBusinessServices> CmdbParentBusinessServices { get; set; }
        public virtual DbSet<Document> Document { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
                optionsBuilder.UseSqlServer("Server=localhost;Database=SMART_Amaris;Trusted_Connection=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("ProductVersion", "2.2.0-rtm-35687");         
            modelBuilder.Entity<Category>(entity =>
            {
                entity.ToTable("Category", "CDN");

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Label)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.HasOne(d => d.Application)
                    .WithMany(p => p.Category)
                    .HasForeignKey(d => d.ApplicationId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CDN.Category_CMDB_ParentBusinessServices");
            });
            modelBuilder.Entity<CmdbParentBusinessServices>(entity =>
            {
                entity.HasKey(e => e.ParentBusinessServiceId)
                    .HasName("PK_ParentBusinessServices");

                entity.ToTable("CMDB_ParentBusinessServices");

                entity.HasIndex(e => e.AppPoolId)
                    .HasName("IX_FK_App_PoolParentBusinessService");

                entity.HasIndex(e => e.Description);

                entity.HasIndex(e => new { e.ParentBusinessServiceId, e.Description, e.IsDisabled })
                    .HasName("IX_CMDB_ParentBusinessServices_IsDisabled");

                entity.Property(e => e.CustomStatsAction).HasMaxLength(255);

                entity.Property(e => e.CustomStatsController).HasMaxLength(255);

                entity.Property(e => e.Description)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.Info).HasMaxLength(255);

                entity.Property(e => e.Label)
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.Note).HasMaxLength(500);

                entity.Property(e => e.UrlForInte)
                    .HasMaxLength(1024)
                    .IsUnicode(false);

                entity.Property(e => e.UrlForProd)
                    .HasMaxLength(1024)
                    .IsUnicode(false);

                entity.Property(e => e.UrlForQa)
                    .HasMaxLength(1024)
                    .IsUnicode(false);

                entity.Property(e => e.Version).IsRequired();

                entity.Property(e => e.VersionExpected)
                    .HasMaxLength(50)
                    .IsUnicode(false);
            });
            modelBuilder.Entity<Document>(entity =>
            {
                entity.ToTable("Document", "CDN");

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Extension)
                    .HasMaxLength(10)
                    .IsUnicode(false);

                entity.Property(e => e.Label)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.Document)
                    .HasForeignKey(d => d.CategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_CDN.Document_CDN.Category");
            });
            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}