// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace RoyalDragon.Admin.Models.Entities
{
    public partial class RoyalDragonDbContext : DbContext
    {
        public RoyalDragonDbContext()
        {
        }

        public RoyalDragonDbContext(DbContextOptions<RoyalDragonDbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Category> Category { get; set; }
        public virtual DbSet<ConfigurationParameters> ConfigurationParameters { get; set; }
        public virtual DbSet<Contact> Contact { get; set; }
        public virtual DbSet<Cost> Cost { get; set; }
        public virtual DbSet<Customer> Customer { get; set; }
        public virtual DbSet<HistoryCallCustomer> HistoryCallCustomer { get; set; }
        public virtual DbSet<Inventory> Inventory { get; set; }
        public virtual DbSet<InventoryHistory> InventoryHistory { get; set; }
        public virtual DbSet<Order> Order { get; set; }
        public virtual DbSet<Product> Product { get; set; }
        public virtual DbSet<ProductHistory> ProductHistory { get; set; }
        public virtual DbSet<ProductOrder> ProductOrder { get; set; }
        public virtual DbSet<Review> Review { get; set; }
        public virtual DbSet<Role> Role { get; set; }
        public virtual DbSet<Setting> Setting { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<UserRole> UserRole { get; set; }
        public virtual DbSet<VCost> VCost { get; set; }
        public virtual DbSet<VListCategoryHomePage> VListCategoryHomePage { get; set; }
        public virtual DbSet<VListDetailOrder> VListDetailOrder { get; set; }
        public virtual DbSet<VListOrder> VListOrder { get; set; }
        public virtual DbSet<VLogin> VLogin { get; set; }
        public virtual DbSet<VProductDetail> VProductDetail { get; set; }
        public virtual DbSet<VReview> VReview { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Category>(entity =>
            {
                entity.Property(e => e.CreateOn).HasColumnType("datetime");

                entity.Property(e => e.Image).HasMaxLength(200);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Slug)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<ConfigurationParameters>(entity =>
            {
                entity.ToTable("Configuration_Parameters");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Description).HasMaxLength(2000);

                entity.Property(e => e.Name).HasMaxLength(200);

                entity.Property(e => e.Value).HasMaxLength(500);
            });

            modelBuilder.Entity<Contact>(entity =>
            {
                entity.Property(e => e.Address).HasMaxLength(200);

                entity.Property(e => e.CreateOn).HasColumnType("datetime");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.Title).HasMaxLength(200);
            });

            modelBuilder.Entity<Cost>(entity =>
            {
                entity.Property(e => e.ApproveBy)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.CreateOn).HasColumnType("datetime");

                entity.Property(e => e.Reason)
                    .IsRequired()
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<Customer>(entity =>
            {
                entity.Property(e => e.Address).HasMaxLength(200);

                entity.Property(e => e.CreateBy)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.CreateOn).HasColumnType("datetime");

                entity.Property(e => e.Email).HasMaxLength(200);

                entity.Property(e => e.FullName)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Image)
                    .HasMaxLength(200)
                    .HasDefaultValueSql("('/assets/images/portrait/small/avatar-s-11.jpg')");

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(400)
                    .HasDefaultValueSql("('$s2$16384$8$1$bQKc3Er3EhrNjyNnsevN7xsPnaIpyIiJxmHidhpZnas=$MnV399IwtSZpnGJxvXm3DAVHVjqUPqXSGuRKDB+65f4=')");

                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasMaxLength(20)
                    .IsUnicode(false);

                entity.Property(e => e.ReasonBad).HasMaxLength(500);

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(newid())");
            });

            modelBuilder.Entity<HistoryCallCustomer>(entity =>
            {
                entity.Property(e => e.CreateOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.CustomerName)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.IsBuy)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Note)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.HasOne(d => d.User)
                    .WithMany(p => p.HistoryCallCustomer)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK__HistoryCa__UserI__245D67DE");
            });

            modelBuilder.Entity<Inventory>(entity =>
            {
                entity.Property(e => e.CreateOn).HasColumnType("datetime");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.Inventory)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Inventory_Product");
            });

            modelBuilder.Entity<InventoryHistory>(entity =>
            {
                entity.Property(e => e.CreateBy)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.CreateOn).HasColumnType("datetime");

                entity.HasOne(d => d.Inventory)
                    .WithMany(p => p.InventoryHistory)
                    .HasForeignKey(d => d.InventoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_InventoryHistory_Inventory");
            });

            modelBuilder.Entity<Order>(entity =>
            {
                entity.Property(e => e.CreateOn).HasColumnType("datetime");

                entity.Property(e => e.Note).HasMaxLength(500);

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.Order)
                    .HasForeignKey(d => d.CustomerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_Customer");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.Order)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Order_User");
            });

            modelBuilder.Entity<Product>(entity =>
            {
                entity.Property(e => e.BannerImg).HasMaxLength(200);

                entity.Property(e => e.CategoryId).HasDefaultValueSql("((2))");

                entity.Property(e => e.Img).HasMaxLength(200);

                entity.Property(e => e.Img2).HasMaxLength(200);

                entity.Property(e => e.Img3).HasMaxLength(200);

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.IsSell)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.ShortDescription).HasMaxLength(2000);

                entity.Property(e => e.Slug)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.Product)
                    .HasForeignKey(d => d.CategoryId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Product_Category");
            });

            modelBuilder.Entity<ProductHistory>(entity =>
            {
                entity.Property(e => e.CreateBy)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.CreateOn).HasColumnType("datetime");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ProductHistory)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductHistory_Product");
            });

            modelBuilder.Entity<ProductOrder>(entity =>
            {
                entity.HasOne(d => d.Order)
                    .WithMany(p => p.ProductOrder)
                    .HasForeignKey(d => d.OrderId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductOrder_Order");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.ProductOrder)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_ProductOrder_Product");
            });

            modelBuilder.Entity<Review>(entity =>
            {
                entity.HasIndex(e => new { e.ProductId, e.CustomerId }, "UQ__Review__2E462081D446973A")
                    .IsUnique();

                entity.Property(e => e.Comment).IsRequired();

                entity.Property(e => e.CreateOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Star).HasDefaultValueSql("((5))");

                entity.HasOne(d => d.Customer)
                    .WithMany(p => p.Review)
                    .HasForeignKey(d => d.CustomerId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Review_Customer");

                entity.HasOne(d => d.Product)
                    .WithMany(p => p.Review)
                    .HasForeignKey(d => d.ProductId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_Review_Product");
            });

            modelBuilder.Entity<Role>(entity =>
            {
                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(100);
            });

            modelBuilder.Entity<Setting>(entity =>
            {
                entity.Property(e => e.Address)
                    .IsRequired()
                    .HasMaxLength(300);

                entity.Property(e => e.Banner)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Email)
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.Property(e => e.FaceBook).HasMaxLength(200);

                entity.Property(e => e.Feather)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Instagram).HasMaxLength(200);

                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasMaxLength(12)
                    .IsUnicode(false);

                entity.Property(e => e.Popular)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.ShopName)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.SpecialOffer)
                    .HasMaxLength(500)
                    .IsUnicode(false);

                entity.Property(e => e.Twitter).HasMaxLength(200);
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.HasIndex(e => e.Username, "UQ__User__536C85E4B9DF629F")
                    .IsUnique();

                entity.Property(e => e.Address).HasMaxLength(500);

                entity.Property(e => e.Avatar)
                    .HasMaxLength(200)
                    .IsUnicode(false)
                    .HasDefaultValueSql("('/dist/assets/images/portrait/small/avatar-s-11.jpg')");

                entity.Property(e => e.Birthday).HasColumnType("date");

                entity.Property(e => e.CreateOn)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Fullname)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.IsActive)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.Position)
                    .HasMaxLength(200)
                    .HasDefaultValueSql("(N'Nhân viên bán hàng')");

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<UserRole>(entity =>
            {
                entity.HasOne(d => d.Role)
                    .WithMany(p => p.UserRole)
                    .HasForeignKey(d => d.RoleId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserRole_Role");

                entity.HasOne(d => d.User)
                    .WithMany(p => p.UserRole)
                    .HasForeignKey(d => d.UserId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_UserRole_User");
            });

            modelBuilder.Entity<VCost>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vCost");

                entity.Property(e => e.ApproveBy)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.CreateBy)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.CreateOn).HasColumnType("datetime");

                entity.Property(e => e.Reason)
                    .IsRequired()
                    .HasMaxLength(200);
            });

            modelBuilder.Entity<VListCategoryHomePage>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vListCategoryHomePage");

                entity.Property(e => e.Image).HasMaxLength(200);

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Slug)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VListDetailOrder>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vListDetailOrder");

                entity.Property(e => e.ProductName)
                    .IsRequired()
                    .HasMaxLength(500);
            });

            modelBuilder.Entity<VListOrder>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vListOrder");

                entity.Property(e => e.CreateOn).HasColumnType("datetime");

                entity.Property(e => e.CustomerName)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Note).HasMaxLength(500);
            });

            modelBuilder.Entity<VLogin>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vLogin");

                entity.Property(e => e.Address).HasMaxLength(500);

                entity.Property(e => e.Avatar)
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Birthday).HasColumnType("date");

                entity.Property(e => e.CreateOn).HasColumnType("datetime");

                entity.Property(e => e.Email)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Fullname)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.ListRoleName).HasMaxLength(4000);

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Phone)
                    .IsRequired()
                    .HasMaxLength(20);

                entity.Property(e => e.Username)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VProductDetail>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vProductDetail");

                entity.Property(e => e.CategoryName)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.CategorySlug)
                    .IsRequired()
                    .HasMaxLength(200)
                    .IsUnicode(false);

                entity.Property(e => e.Img).HasMaxLength(200);

                entity.Property(e => e.Img2).HasMaxLength(200);

                entity.Property(e => e.Img3).HasMaxLength(200);

                entity.Property(e => e.ProductName)
                    .IsRequired()
                    .HasMaxLength(500);

                entity.Property(e => e.ShortDescription).HasMaxLength(2000);

                entity.Property(e => e.Slug)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<VReview>(entity =>
            {
                entity.HasNoKey();

                entity.ToView("vReview");

                entity.Property(e => e.Comment).IsRequired();

                entity.Property(e => e.CreateOn).HasColumnType("datetime");

                entity.Property(e => e.CustomerName)
                    .IsRequired()
                    .HasMaxLength(200);

                entity.Property(e => e.Image).HasMaxLength(200);
            });

            OnModelCreatingGeneratedProcedures(modelBuilder);
            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}